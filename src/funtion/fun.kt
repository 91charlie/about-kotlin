
fun f_ex(a:Int , b:Int = 4 ) : Int = a + b
// 함수 선언의 기본적 형태이며 return 값이 간단한 연산값일 경우 " = " 을 사용하여 본 예시의 "a + b" 처럼 작성하면 간결한 표현이 가능하다.
// 예시의 "b" 처럼 기본값을 가진 파라미터가 있을 경우 기본값이 없는 파라미터를 먼저 작성하여 함수 선언을 한다.

// @JvmOverloads 는 코틀린과 자바의 상호 운용성을 높혀주는 어노테이션이다.
@JvmOverloads
fun j_ex(a:Int, b:Int = 3):Int = a + b
//기본 매개변수 (default parameter) 의 각 값을 삽입하는 오버로드 된 메서드가 자동으로 생성된다.
// 코틀린에서 작성된 코드를 기본 매개 변수가 없는 자바에서 사용가능해진다.
// 오버로딩? -> 같은 이름의 메소드를 매개 변수의 타입과 개수를 달리하여 선언하는 것


fun Int.double():Int = this * 2

fun Int.half():Int = this / 2
// fun 확장하려는 타입.이름:리턴 타입 으로 확장 함수 선언이 가능하다
// 내용은 다른 함수와 동일하게 = 또는 {}내에 작성하면 된다.
// 오버라이딩하여 기능을 재정의 할 수 없다.
// 오버라이딩? -> 같은 이름, 매개변수의 타입과 개수를 가진 다른 기능의 메소드를 선언하는 것


fun main()
{
    f_ex(4)
    j_ex(3)

    val a:Int = 4

    println(a.double())
    println(a.half())
}